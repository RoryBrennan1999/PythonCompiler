# ---------------------------------------------------------------------------#
#                                                                            #
#    <Program>       :==  "PROGRAM" <Identifier> ";" [<Declarations>]        #
#                         {<ProcDeclaration>} <Block> "."              (1) 	 #
#    <Declarations>  :==  "VAR" <Variable> { "," <Variable> }          (2)   #
# 	 <ProcDeclarati> :==  "PROCEDURE" <Identifier> [<ParameterList>]	     #
#						  ";" [ <Declarations> ] {<ProcDeclaration>]}	     #
#						  <Block> ";"								   (3)   #
#	 <ParameterList> :==  "(" <FormalParameter> {"," <FormalParameter}       #
#						  ")"										   (4)	 #
#    <FormalParamet> :==  [ "REF" ] <Variable>						   (5)   #
#    <Block>         :==  "BEGIN" { <Statement> ";" } "END"            (6)   #
#    <Statement>     :==  <SimpleStatement> | <WhileStatement> |             #
#						  <IfStatement> | <ReadStatement> |                  #
#						  <WriteStatement>							   (7)   #
#    <SimpleStateme> :==  <VarOrProcName> <RestOfStatement>            (8)   #
#    <RestOfStateme> :==  <ProcCallList> | <Assignment> | eps          (9)   #
#    <ProcCallList>  :==  "(" <ActualParameter> {"," <ActualParameter>}      #
#						  ")"										   (10)  #
#    <Assignment>	 :==  ":==" <Expression>						   (11)  #
#    <ActualParamet> :==  <Variable> | <Expression>					   (12)  #
#	 <WhileStatemen> :==  "WHILE" <BooleanExpression> "DO" <Block>     (13)  #
#    <IfStatement>   :==  "IF" <BooleanExpression> "THEN" <Block>			 #
#						  [ "ELSE" <Block> ]                           (14)  #
#    <ReadStatement> :== "READ" "(" <Variable> {"," <Variable> } ")"   (15)  #
#    <WriteStatemen> :== "WRITE" "(" <Expression> { "," <Expression>         #
#						 } ")"										   (16)  #
#	 <Expression>    :== <CompoundTerm> { <AddOp> <CompoundTerm> }	   (17)  #
# 	 <CompoundTerm>  :== <Term> { <MultOP> <Term> }					   (18)  #
#    <Term>          :== ["-"] <SubTerm>							   (19)  #
#	 <SubTerm>		 :== <Variable> | <IntConst> | "(" <Expression> ")"(20)  #
#	 <BooleanExpre>  :== <Expression> <RelOp> <Expression>             (21)  #
#                                                                            #
#                                                                            #
#       Note - <Identifier> and <IntConst> are provided by the scanner       #
#       as tokens IDENTIFIER and INTCONST respectively.                      #
#                                                                            #
#      As <Variable> is just a renaming of <Identifier>, we will omit        #
#       any explicit implementation of <Variable>, and just use              #
#       "Accept( IDENTIFIER );"  wherever a <Variable> is needed.            #
#                                                                            #
#                                                                            #
# ---------------------------------------------------------------------------#